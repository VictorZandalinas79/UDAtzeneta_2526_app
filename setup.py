#!/usr/bin/env python3
"""
Script de instalaci√≥n y configuraci√≥n para UD Atzeneta
Automatiza la configuraci√≥n inicial de la aplicaci√≥n

Uso:
    python setup.py install    # Instalaci√≥n completa
    python setup.py configure  # Solo configuraci√≥n
    python setup.py test       # Ejecutar tests
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path

def print_banner():
    """Muestra el banner de bienvenida"""
    banner = """
    ‚öΩ UD ATZENETA - SISTEMA DE GESTI√ìN ‚öΩ
    =====================================
    
    Configurando la aplicaci√≥n de gesti√≥n
    del equipo de f√∫tbol UD Atzeneta
    
    Versi√≥n 1.0.0
    Desarrollado con ‚ù§Ô∏è para el club
    """
    print(banner)

def check_python_version():
    """Verifica que se est√© usando Python 3.11+"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 11):
        print("‚ùå Se requiere Python 3.11 o superior")
        print(f"   Versi√≥n actual: {version.major}.{version.minor}.{version.micro}")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True

def install_dependencies():
    """Instala las dependencias del proyecto"""
    print("\nüì¶ Instalando dependencias...")
    
    try:
        # Actualizar pip
        subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'], 
                      check=True, capture_output=True)
        
        # Instalar dependencias desde requirements.txt
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], 
                      check=True, capture_output=True)
        
        print("‚úÖ Dependencias instaladas correctamente")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando dependencias: {e}")
        return False

def create_directory_structure():
    """Crea la estructura de directorios necesaria"""
    print("\nüìÅ Creando estructura de directorios...")
    
    directories = [
        'assets/images',
        'logs',
        'backups',
        'exports',
        'temp'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"   üìÇ {directory}")
    
    # Crear archivo .gitkeep en assets/images
    gitkeep_path = Path('assets/images/.gitkeep')
    if not gitkeep_path.exists():
        gitkeep_path.touch()
    
    print("‚úÖ Estructura de directorios creada")

def create_env_file():
    """Crea el archivo .env si no existe"""
    print("\n‚öôÔ∏è  Configurando variables de entorno...")
    
    env_path = Path('.env')
    env_example_path = Path('.env.example')
    
    if env_path.exists():
        print("   ‚ÑπÔ∏è  Archivo .env ya existe, omitiendo...")
        return
    
    if not env_example_path.exists():
        print("   ‚ö†Ô∏è  Archivo .env.example no encontrado")
        return
    
    # Copiar .env.example a .env
    with open(env_example_path, 'r') as source:
        with open(env_path, 'w') as dest:
            dest.write(source.read())
    
    print("‚úÖ Archivo .env creado desde .env.example")
    print("   üìù Edita .env para personalizar la configuraci√≥n")

def initialize_database():
    """Inicializa la base de datos"""
    print("\nüóÑÔ∏è  Inicializando base de datos...")
    
    try:
        # Importar e inicializar la base de datos
        sys.path.insert(0, os.getcwd())
        from database.db_manager import init_database
        
        init_database()
        print("‚úÖ Base de datos inicializada correctamente")
        print("   üë§ Usuario por defecto: admin / admin123")
        return True
        
    except Exception as e:
        print(f"‚ùå Error inicializando base de datos: {e}")
        return False

def run_tests():
    """Ejecuta los tests b√°sicos"""
    print("\nüß™ Ejecutando tests b√°sicos...")
    
    try:
        # Verificar que pytest est√° instalado
        subprocess.run([sys.executable, '-c', 'import pytest'], 
                      check=True, capture_output=True)
        
        # Ejecutar tests
        result = subprocess.run([sys.executable, '-m', 'pytest', 'test_basic.py', '-v'], 
                               capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Todos los tests pasaron correctamente")
            return True
        else:
            print("‚ùå Algunos tests fallaron:")
            print(result.stdout)
            return False
            
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è  pytest no est√° instalado, omitiendo tests...")
        return True

def check_application():
    """Verifica que la aplicaci√≥n se puede importar correctamente"""
    print("\nüîç Verificando aplicaci√≥n...")
    
    try:
        sys.path.insert(0, os.getcwd())
        
        # Verificar importaciones cr√≠ticas
        from database.db_manager import DatabaseManager
        from auth.login import verify_credentials
        from config.settings import APP_CONFIG
        
        print("‚úÖ Todas las importaciones son correctas")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False

def create_startup_script():
    """Crea script de inicio para desarrollo"""
    print("\nüöÄ Creando script de inicio...")
    
    startup_content = """#!/usr/bin/env python3
\"\"\"
Script de inicio para UD Atzeneta
\"\"\"

import os
import sys

def main():
    print("üöÄ Iniciando UD Atzeneta...")
    
    # Configurar variables de entorno si existen
    if os.path.exists('.env'):
        from dotenv import load_dotenv
        load_dotenv()
    
    # Importar y ejecutar la aplicaci√≥n
    from app import app, server
    
    port = int(os.environ.get('PORT', 8050))
    debug = os.environ.get('DASH_DEBUG_MODE', 'True') == 'True'
    
    print(f"üì° Servidor iniciado en http://localhost:{port}")
    print("üë§ Usuario por defecto: admin / admin123")
    print("üõë Presiona Ctrl+C para detener")
    
    app.run_server(
        host='0.0.0.0',
        port=port,
        debug=debug
    )

if __name__ == '__main__':
    main()
"""
    
    with open('start.py', 'w') as f:
        f.write(startup_content)
    
    # Hacer ejecutable en sistemas Unix
    if os.name != 'nt':
        os.chmod('start.py', 0o755)
    
    print("‚úÖ Script de inicio creado: start.py")

def print_final_instructions():
    """Muestra las instrucciones finales"""
    instructions = """
    üéâ ¬°INSTALACI√ìN COMPLETADA!
    ===========================
    
    La aplicaci√≥n UD Atzeneta est√° lista para usar.
    
    üìã PR√ìXIMOS PASOS:
    
    1. Iniciar la aplicaci√≥n:
       python start.py
       
    2. Abrir en navegador:
       http://localhost:8050
       
    3. Iniciar sesi√≥n:
       Usuario: admin
       Contrase√±a: admin123
    
    üìö COMANDOS √öTILES:
    
    ‚Ä¢ Administraci√≥n:     python admin.py --help
    ‚Ä¢ Tests:              python -m pytest test_basic.py
    ‚Ä¢ Backup:             python admin.py backup-data
    ‚Ä¢ Crear usuario:      python admin.py create-user
    
    üìÅ ARCHIVOS IMPORTANTES:
    
    ‚Ä¢ .env                - Configuraci√≥n local
    ‚Ä¢ ud_atzeneta.db      - Base de datos
    ‚Ä¢ assets/images/      - Fotos de jugadores
    ‚Ä¢ backups/            - Copias de seguridad
    
    üÜò SOPORTE:
    
    ‚Ä¢ README.md           - Documentaci√≥n completa
    ‚Ä¢ CHANGELOG.md        - Historial de cambios
    ‚Ä¢ GitHub Issues       - Reportar problemas
    
    ¬°Disfruta gestionando tu equipo! ‚öΩ
    """
    print(instructions)

def install_full():
    """Realiza la instalaci√≥n completa"""
    print_banner()
    
    if not check_python_version():
        return False
    
    steps = [
        ("Instalando dependencias", install_dependencies),
        ("Creando directorios", create_directory_structure),
        ("Configurando entorno", create_env_file),
        ("Inicializando base de datos", initialize_database),
        ("Verificando aplicaci√≥n", check_application),
        ("Creando script de inicio", create_startup_script),
    ]
    
    for step_name, step_func in steps:
        try:
            if not step_func():
                print(f"\n‚ùå Error en: {step_name}")
                return False
        except Exception as e:
            print(f"\n‚ùå Error inesperado en {step_name}: {e}")
            return False
    
    print_final_instructions()
    return True

def configure_only():
    """Solo realiza la configuraci√≥n sin instalar dependencias"""
    print_banner()
    
    steps = [
        ("Creando directorios", create_directory_structure),
        ("Configurando entorno", create_env_file),
        ("Inicializando base de datos", initialize_database),
        ("Creando script de inicio", create_startup_script),
    ]
    
    for step_name, step_func in steps:
        try:
            step_func()
        except Exception as e:
            print(f"\n‚ùå Error en {step_name}: {e}")
            return False
    
    print("\n‚úÖ Configuraci√≥n completada")
    return True

def main():
    """Funci√≥n principal"""
    parser = argparse.ArgumentParser(description='Setup para UD Atzeneta')
    parser.add_argument('command', 
                       choices=['install', 'configure', 'test'], 
                       help='Comando a ejecutar')
    
    args = parser.parse_args()
    
    if args.command == 'install':
        success = install_full()
    elif args.command == 'configure':
        success = configure_only()
    elif args.command == 'test':
        print_banner()
        success = run_tests()
    
    return 0 if success else 1

if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)